#include "EmitIR.hpp"
#include <llvm/Transforms/Utils/ModuleUtils.h>

#define self (*this)

using namespace asg;

EmitIR::EmitIR(Obj::Mgr& mgr, llvm::LLVMContext& ctx, llvm::StringRef mid)
  : mMgr(mgr)
  , mMod(mid, ctx)
  , mCtx(ctx)
  , mIntTy(llvm::Type::getInt32Ty(ctx))
  , mCurIrb(std::make_unique<llvm::IRBuilder<>>(ctx))
  , mCtorTy(llvm::FunctionType::get(llvm::Type::getVoidTy(ctx), false))
  , mCurFunc(nullptr)//new
{
}

llvm::Module&
EmitIR::operator()(asg::TranslationUnit* tu)
{
  for (auto&& i : tu->decls){
    self(i);
    //每一次调用完都要设置一下当前函数指针为空
    mCurFunc=nullptr;
  }
  return mMod;
}

//==============================================================================
// 类型
//==============================================================================

llvm::Type*
EmitIR::operator()(const Type* type)
{
  if (type->texp == nullptr) {
    switch (type->spec) {
      case Type::Spec::kInt:
        return llvm::Type::getInt32Ty(mCtx);
      case Type::Spec::kLong:
        return llvm::Type::getInt64Ty(mCtx);
      case Type::Spec::kLongLong:
        return llvm::Type::getInt128Ty(mCtx);
      case Type::Spec::kChar:
        return llvm::Type::getInt8Ty(mCtx);
      case Type::Spec::kVoid:
        return llvm::Type::getVoidTy(mCtx);
      
      // TODO: 在此添加对更多基础类型的处理
      default:
        ABORT();
    }
  }

  Type subt;
  subt.spec = type->spec;
  subt.qual = type->qual;
  subt.texp = type->texp->sub;

  // TODO: 在此添加对指针类型、数组类型和函数类型的处理

  if (auto p = type->texp->dcst<FunctionType>()) {
    std::vector<llvm::Type*> pty;
    // TODO: 在此添加对函数参数类型的处理
    return llvm::FunctionType::get(self(&subt), std::move(pty), false);
  }
  if (auto p = type->texp->dcst<PointerType>()) {
    auto ty = self(&subt);
    return llvm::PointerType::get(ty, 0);
  }
  if (auto p = type->texp->dcst<ArrayType>()) {
    auto ty = self(&subt);
    return llvm::ArrayType::get(ty, p->len);
  }

  ABORT();
}

//==============================================================================
// 表达式
//==============================================================================

llvm::Value*
EmitIR::operator()(Expr* obj)
{
  //std::cout<<obj->type<<std::endl;
  // TODO: 在此添加对更多表达式处理的跳转
  if (auto p = obj->dcst<IntegerLiteral>())
    return self(p);
  //声明引用表达式 x=x+1;
  if (auto p = obj->dcst<DeclRefExpr>())
    return self(p);

  //隐式类型转换表达式
  if (auto p = obj->dcst<ImplicitCastExpr>())
    return self(p);

  //a+b二元(包括下标[])
  if (auto p = obj->dcst<BinaryExpr>())
    return self(p);
  
  //-5一元
  if (auto p = obj->dcst<UnaryExpr>())
    return self(p);

  //()括号表达式
  if (auto p = obj->dcst<ParenExpr>())
    return self(p);

  //函数调用表达式
  if (auto p = obj->dcst<CallExpr>())
    return self(p);
  
  //初始化列表表达式
  // if (auto p = obj->dcst<InitListExpr>())
  //   return self(p);
  ABORT();
}

llvm::Constant*
EmitIR::operator()(IntegerLiteral* obj)
{
  return llvm::ConstantInt::get(self(obj->type), obj->val);
}

// TODO: 在此添加对更多表达式类型的处理
llvm::Value*
EmitIR::operator()(ImplicitCastExpr* obj)
{
  auto sub = self(obj->sub); //p=p-1，第二个p是ImplicitCastExpr，他的sub是什么类型？DeclRefExpr；返回的auto sub是空指针->在DeclRefExpr构造函数中，decl为空

  auto& irb = *mCurIrb;
  switch (obj->kind) {
    case ImplicitCastExpr::kLValueToRValue: {
      auto ty = self(obj->sub->type);
      auto loadVal = irb.CreateLoad(ty, sub);
      return loadVal;
    }

    //new 
    case ImplicitCastExpr::kIntegralCast:{
      return irb.CreateIntCast(sub, self(obj->sub->type), true);
    }
    //new 把数组转换为指针int e[4][2] = {{0, c[2][1]}, {3, 4}, {5, 6}, {7, 8}};
    case ImplicitCastExpr::kArrayToPointerDecay:{
      auto type = self(obj->sub->type);
      return irb.CreateInBoundsGEP(type, sub, {irb.getInt64(0)});
    }
    //new
    case ImplicitCastExpr::kFunctionToPointerDecay:
      return sub;

    default:
      ABORT();
  }
}

llvm::Value*
EmitIR::operator()(DeclRefExpr* obj)//x + 1 中的 x → 使用了前面的变量 → 对应 DeclRefExpr
{
  // 在LLVM IR层面，左值体现为返回指向值的指针
  // 在ImplicitCastExpr::kLValueToRValue中发射load指令从而变成右值
  //return reinterpret_cast<llvm::Value*>(obj->decl->any);

  //【局部变量需要通过符号表获得】记得include头文件
  //https://arcsysu.github.io/YatCC/#/task3_doc/ir?id=%e5%9c%a8%e5%87%bd%e6%95%b0%e7%ac%a6%e5%8f%b7%e8%a1%a8%e4%b8%ad%e6%9f%a5%e6%89%be%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f
  auto name = obj->decl->name;
  auto type = self(obj->decl->type);
  // 先查看局部遮掩的符号
  if (auto p = mCurFunc->getValueSymbolTable()->lookup(name)) {
    return p;
  }
  if (auto p = mMod.getGlobalVariable(name)) {
    return p;
  }
  if (auto p = mMod.getFunction(name)) {
    return p;
  }
}
llvm::Value*
EmitIR::operator()(BinaryExpr* obj)
{
  llvm::Value *lftVal, *rhtVal;
  auto& irb = *mCurIrb;

  switch (obj->op) {
    case BinaryExpr::kAdd:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateAdd(lftVal, rhtVal);
    }
    case BinaryExpr::kSub:{//有可能是负号
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateSub(lftVal, rhtVal);
    }
    case BinaryExpr::kMul:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateMul(lftVal, rhtVal);
    }

    case BinaryExpr::kDiv:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateSDiv(lftVal, rhtVal);
    }
    case BinaryExpr::kMod:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateSRem(lftVal, rhtVal);
    }
    case BinaryExpr::kEq:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateICmpEQ(lftVal, rhtVal);
    }
    case BinaryExpr::kNe:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateICmpNE(lftVal, rhtVal);
    }
    case BinaryExpr::kGt:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateICmpSGT(lftVal, rhtVal);
    }
      
    case BinaryExpr::kGe:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateICmpSGE(lftVal, rhtVal);
    }
    case BinaryExpr::kLt: {
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateICmpSLT(lftVal, rhtVal);
    }
      
    case BinaryExpr::kLe:{
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      return irb.CreateICmpSLE(lftVal, rhtVal);
    }
    
    case BinaryExpr::kOr:
    {
      //https://arcsysu.github.io/YatCC/#/task3_doc/ir?id=%e6%88%96%e7%9a%84%e4%be%8b%e5%ad%90
      //测例48：应直接翻译为 连续的 or 条件，而不是分层判断，因此要把左右对象构造放在中间

      
      llvm::BasicBlock *basebBlock =  mCurIrb->GetInsertBlock();
      llvm::BasicBlock *rhsFalseBlock = llvm::BasicBlock::Create(mCtx, "lor.rhs", mCurFunc);
      llvm::BasicBlock *rorEndBlock = llvm::BasicBlock::Create(mCtx, "lor.end", mCurFunc);
      
      
      lftVal = self(obj->lft);//要放在前面，这样可以让做左边的逻辑表达式先处理
      std::cout<<"left_or_finished\n";
      // lftVal为真，则跳转到 lor.end，否则，跳转到 lor.rhs
      if (!lftVal->getType()->isIntegerTy(1)) {  // 如果不是 i1 类型
          lftVal = mCurIrb->CreateICmpNE(
              lftVal,
              llvm::ConstantInt::get(lftVal->getType(), 0),
              "boolcast"
          );
      }
      //mCurIrb->SetInsertPoint(basebBlock);//确保这一句br放在basebBlock//这句话没有必要
      mCurIrb->CreateCondBr(lftVal, rorEndBlock, rhsFalseBlock);

      /// 将当前 IR 插入点设置为 lor.rhs，因为要处理 exp_2，
      mCurIrb->SetInsertPoint(rhsFalseBlock);
      rhtVal = self(obj->rht);
      if (!rhtVal->getType()->isIntegerTy(1)) {  // 如果不是 i1 类型
          rhtVal = mCurIrb->CreateICmpNE(
              rhtVal,
              llvm::ConstantInt::get(rhtVal->getType(), 0),
              "boolcast"
          );
      }
      // 无条件跳转到 lor.end
      mCurIrb->CreateBr(rorEndBlock);

      
      /// phi指令
      mCurIrb->SetInsertPoint(rorEndBlock);
      llvm::PHINode *phi = mCurIrb->CreatePHI(llvm::Type::getInt1Ty(mCtx), 2, "merge");
      llvm::BasicBlock* block1;
      if (auto* inst = llvm::dyn_cast<llvm::Instruction>(lftVal)) { //返回为一个phi指令
          block1 = inst->getParent();
      }
      else block1=basebBlock;

      llvm::BasicBlock* block2;
      if (auto* inst = llvm::dyn_cast<llvm::Instruction>(rhtVal)) { //返回为一个phi指令
          block2 = inst->getParent();
      }
      else block2=rhsFalseBlock;

      
      phi->addIncoming(mCurIrb->getInt1(true),  block1);
      phi->addIncoming(rhtVal, block2);
      return phi;
    }
    case BinaryExpr::kAnd:
    {
      
      llvm::BasicBlock *basebBlock = mCurIrb->GetInsertBlock();
      llvm::BasicBlock *lhsTrueBlock  = llvm::BasicBlock::Create(mCtx, "land.rhs", mCurFunc);
      llvm::BasicBlock *landEndBlock = llvm::BasicBlock::Create(mCtx, "land.end", mCurFunc);
      
      // lftVal为真，则跳转到 land.end，否则，跳转到 land.rhs
      
      lftVal = self(obj->lft);//PHI node entries do not match predecessors!  %merge1 = phi i1 [ true, %entry ], [ %19, %lor.rhs ]
      std::cout<<"left_and_finished\n";
      //Assertion `getCondition()->getType()->isIntegerTy(1) && "May only branch on boolean predicates!"
      if (!lftVal->getType()->isIntegerTy(1)) {  // 如果不是 i1 类型
          lftVal = mCurIrb->CreateICmpNE(
              lftVal,
              llvm::ConstantInt::get(lftVal->getType(), 0),
              "boolcast"
          );
      }
      //mCurIrb->SetInsertPoint(basebBlock);
      mCurIrb->CreateCondBr(lftVal, lhsTrueBlock, landEndBlock);
      
      /// 将当前 IR 插入点设置为 lor.rhs，因为要处理 exp_2，
      mCurIrb->SetInsertPoint(lhsTrueBlock);
      rhtVal = self(obj->rht);
      //  Instruction does not dominate all uses!  %boolcast 的计算可能放在了错误的块里。
      //要保证传的是布尔变量；否则报错llvm::PHINode::setIncomingValue(unsigned int, llvm::Value*): Assertion `getType() == V->getType() && "All operands to PHI node must be the same type as the PHI node!"' failed.
      if (!rhtVal->getType()->isIntegerTy(1)) {  // 如果不是 i1 类型
          rhtVal = mCurIrb->CreateICmpNE(
              rhtVal,
              llvm::ConstantInt::get(rhtVal->getType(), 0),
              "boolcast"
          );
      }
      // 无条件跳转到 lor.end
      mCurIrb->CreateBr(landEndBlock);

      /// phi指令
      mCurIrb->SetInsertPoint(landEndBlock);
      llvm::PHINode *phi = mCurIrb->CreatePHI(llvm::Type::getInt1Ty(mCtx), 2, "merge");
      llvm::BasicBlock* block;//=========================new========================
      if (auto* inst = llvm::dyn_cast<llvm::Instruction>(lftVal)) { //返回为一个phi指令
          block = inst->getParent();
      }
      else block=basebBlock;
      llvm::BasicBlock* block2;
      if (auto* inst = llvm::dyn_cast<llvm::Instruction>(rhtVal)) { //返回为一个phi指令
          block2 = inst->getParent();
      }
      else block2=lhsTrueBlock;

      phi->addIncoming(mCurIrb->getInt1(false),  block);
      phi->addIncoming(rhtVal, block2);
      return phi;
    }
    case BinaryExpr::kAssign://赋值表达式：可能是用常量或者变量，所以统一用trans_init
    {
      lftVal = self(obj->lft);
      //会导致二次调用，其实self函数调用放进指定位置的步骤不需要在这里完成
      //rhtVal = self(obj->rht);
      trans_init(lftVal, obj->rht);
      return lftVal;
    }
    case BinaryExpr::kIndex: {
      lftVal = self(obj->lft);
      rhtVal = self(obj->rht);
      auto type = self(obj->type);
      return irb.CreateInBoundsGEP(type, lftVal, rhtVal);//此时rhtVal是一个索引变量std::vector<llvm::Value *> idxList
    }
    default:
      ABORT();
  }
}

llvm::Value* EmitIR::operator()(UnaryExpr* obj) {
  auto sub = self(obj->sub);

  auto &irb = *mCurIrb;

  switch (obj->op) {
    case UnaryExpr::Op::kPos:
      return sub;
    case UnaryExpr::Op::kNeg:
      return irb.CreateNeg(sub);
    case UnaryExpr::Op::kNot: {
      llvm::Value* toBool = sub->getType()->isIntegerTy(1) ? sub : irb.CreateICmpNE(sub, llvm::Constant::getNullValue(sub->getType()));
      return irb.CreateNot(toBool);
    }
    default:
      ABORT();
  }

}
llvm::Value* EmitIR::operator()(ParenExpr* obj) {
  return self(obj->sub);
}


//https://arcsysu.github.io/YatCC/#/task3_doc/ir?id=%e6%95%b0%e7%bb%84%e5%85%83%e7%b4%a0%e7%9a%84%e8%ae%bf%e9%97%ae
// gpt:operator() 返回 nullptr，并专门在 trans_init() 中处理 InitListExpr 初始化逻辑
// llvm::Value* EmitIR::operator()(InitListExpr* obj) {
//   return self(obj);
// }



//==============================================================================
// 语句
//==============================================================================

void
EmitIR::operator()(Stmt* obj)
{

  if (auto p = obj->dcst<CompoundStmt>()){//复合语句是由大括号 {} 包围的一系列语句
    //https://arcsysu.github.io/YatCC/#/task3_doc/ir?id=%e7%ac%ac%e4%ba%8c%e7%a7%8d%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95
    //内建（intrinsics）函数,在 LLVM IR 的开头调用 llvm.stacksave 记录当前函数的栈高度
    // 创建调用 llvm.stacksave 的指令
    //auto sp = mCurIrb->CreateIntrinsic(llvm::Intrinsic::stacksave, {}, {},nullptr, "sp");
    bool hasTerminator = analyzeTerminator(obj); // 检查是否有中止指令
    if(hasTerminator==0){
      llvm::CallInst* sp = mCurIrb->CreateStackSave();
      //llvm::errs() << "Creating stacksave\n";
      //llvm::errs() << "sp type: "; sp->getType()->print(llvm::errs()); llvm::errs() << "\n";
      
      /* 解析 CompoundStmt，生成 LLVM IR */
      self(p);
      /// 创建调用 llvm.stackrestore 的指令
      mCurIrb->CreateStackRestore(sp);
      //mCurIrb->CreateIntrinsic(llvm::Intrinsic::stackrestore, {}, {sp});
      return;
    }
    else{
      self(p);
      return;
    }
    

  }
  if (auto p = obj->dcst<ReturnStmt>())
    return self(p);

  // TODO: 在此添加对更多Stmt类型的处理的跳转
  //int a=5是一个declaration statement
  if (auto p = obj->dcst<DeclStmt>())
    return self(p);
  //a=5是一个expression statement
  if (auto p = obj->dcst<ExprStmt>())
    return self(p);
  if (auto p = obj->dcst<IfStmt>())
    return self(p);
  if (auto p = obj->dcst<WhileStmt>())
    return self(p);
  if (auto p = obj->dcst<ContinueStmt>())
    return self(p);
  if (auto p = obj->dcst<BreakStmt>())
    return self(p);
  if(auto p=obj->dcst<NullStmt>())
    return;
  ABORT();
}

// TODO: 在此添加对更多Stmt类型的处理

void
EmitIR::operator()(CompoundStmt* obj)
{
  // TODO: 可以在此添加对符号重名的处理
  for (auto&& stmt : obj->subs){
    //std::cout<<std::endl;
    self(stmt);
  }
}

void
EmitIR::operator()(ReturnStmt* obj)
{
  auto& irb = *mCurIrb;
  //在处理 ReturnStmt 节点的函数中，需要获得返回值，因此进入处理 Expr 节点的函数
  llvm::Value* retVal;
  if (!obj->expr)
    retVal = nullptr;
  else
    retVal = self(obj->expr);

  if (retVal)
    irb.CreateRet(retVal);
  else
    irb.CreateRetVoid();

  //auto exitBb = llvm::BasicBlock::Create(mCtx, "return_exit", mCurFunc);
  //mCurIrb->SetInsertPoint(exitBb);
}

void 
EmitIR::operator()(DeclStmt* obj) {
  for (auto&& decl : obj->decls)
    self(decl);
}

void
EmitIR::operator()(ExprStmt* obj)
{
  self(obj->expr);
}

llvm::Value* EmitIR::operator()(CallExpr* obj) {
  auto func = reinterpret_cast<llvm::Function*>(self(obj->head));//obj->head是一个隐式调用类型，pointerdecay
  std::vector<llvm::Value*> params;
  for (int iter = 0; iter < obj->args.size(); iter++) {
    params.push_back(self(obj->args[iter]));
  }
  return mCurIrb->CreateCall(func,params);
  //调用函数的写法：https://arcsysu.github.io/YatCC/#/task3_doc/ir?id=%e8%b0%83%e7%94%a8%e5%87%bd%e6%95%b0
}

bool EmitIR::analyzeTerminator(Stmt* stmt) {
    if (auto ret = dynamic_cast<ReturnStmt*>(stmt)) {
        return true; // 包含 return
    }
    if (auto br = dynamic_cast<BreakStmt*>(stmt)) {
        return true; // 包含 break
    }
    if(auto br=dynamic_cast<ContinueStmt*>(stmt)){
      return true;
    }
    if (auto compound = dynamic_cast<CompoundStmt*>(stmt)) {
        for (auto& s : compound->subs) {
            if (analyzeTerminator(s)) {
                return true;
            }
        }
    }
    return false;
}
void EmitIR::operator()(IfStmt* obj) {
  //https://arcsysu.github.io/YatCC/#/task3_doc/ir?id=coditional-branch-instruction
  auto &irb = *mCurIrb;
  auto condVal = self(obj->cond);
  llvm::Value* tf_val;
  auto ty = condVal->getType();
  if (ty->isIntegerTy(1)) { 
    // bool (i1)
    tf_val=condVal;
  }
  else {
    auto &irb = *mCurIrb;
    auto zero = irb.CreateIntCast(
      llvm::ConstantInt::get(ty, 0), ty, false);
    tf_val=irb.CreateICmpNE(condVal, zero); // IR val
  }


  auto thenBb = llvm::BasicBlock::Create(mCtx, "if.then", mCurFunc);
  auto elseBb = llvm::BasicBlock::Create(mCtx, "if.else", mCurFunc);
  auto exitBb = llvm::BasicBlock::Create(mCtx, "if.exit", mCurFunc);

  irb.CreateCondBr(tf_val, thenBb, elseBb); //基本块的跳转

  //重设了 IRBuilder 的插入点到 thenBb：
  //mCurIrb->SetInsertPoint(thenBb);//上下方两种写法效果一致
  mCurIrb = std::make_unique<llvm::IRBuilder<>>(thenBb);
  if (obj->then) {
    //self(obj->then);
    bool hasTerminator = analyzeTerminator(obj->then); // 检查是否有中止指令
    if (!hasTerminator) {
        self(obj->then); // 只有无中止指令时才生成 compoundstmt
        mCurIrb->CreateBr(exitBb);
    } else {
        self(obj->then); // 直接生成中止指令（如 return/break）
    }
  }
  // if (mCurIrb->GetInsertBlock()->getTerminator() == nullptr)//获取该基本块的终止指令（如 ret、br 等）【只会检查当前基本块的最后一条指令是否是终止指令】
  //   mCurIrb->CreateBr(exitBb);//如果没有终止指令，就创建跳转create branch到 exit 块的指令


  mCurIrb = std::make_unique<llvm::IRBuilder<>>(elseBb);
  if (obj->else_) {
    //self(obj->else_);
    bool hasTerminator = analyzeTerminator(obj->else_); // 检查是否有中止指令
    if (!hasTerminator) {
        self(obj->else_); // 只有无中止指令时才生成 compoundstmt+跳转指令
        mCurIrb->CreateBr(exitBb);
    } else {
        self(obj->else_); // 直接生成中止指令（如 return/break）
    }
  }
  else{
    mCurIrb->CreateBr(exitBb);
  }
  // if (mCurIrb->GetInsertBlock()->getTerminator() == nullptr)
  //   mCurIrb->CreateBr(exitBb);

  mCurIrb = std::make_unique<llvm::IRBuilder<>>(exitBb);
}
struct LoopBlocks {
    llvm::BasicBlock* cond;  // 循环条件检查块
    llvm::BasicBlock* exit;  // 循环退出块
};
void EmitIR::operator()(ContinueStmt* obj) {
    auto &irb = *mCurIrb;
    auto* loopInfo = reinterpret_cast<LoopBlocks*>(obj->loop->any);
    irb.CreateBr(loopInfo->cond);  // continue 跳回条件检查块
}

void EmitIR::operator()(BreakStmt* obj) {
    auto &irb = *mCurIrb;
    auto* loopInfo = reinterpret_cast<LoopBlocks*>(obj->loop->any);
    irb.CreateBr(loopInfo->exit);  // break 跳到退出块
}

void EmitIR::operator()(WhileStmt* obj) {
  auto &irb = *mCurIrb;

  auto condBb = llvm::BasicBlock::Create(mCtx, "while.cond", mCurFunc);
  auto bodyBb = llvm::BasicBlock::Create(mCtx, "while.body", mCurFunc);
  auto exitBb = llvm::BasicBlock::Create(mCtx, "while.exit", mCurFunc);
  // 存储 condBb 和 exitBb 到 obj->any
  auto loopInfo = std::make_unique<LoopBlocks>(LoopBlocks{condBb, exitBb});
  obj->any = loopInfo.get();

  //跳转到条件语句块
  irb.CreateBr(condBb);
  mCurIrb = std::make_unique<llvm::IRBuilder<>>(condBb);
  auto cond = self(obj->cond);
  if (mCurIrb->GetInsertBlock()->getTerminator() == nullptr)
    mCurIrb->CreateCondBr(cond, bodyBb, exitBb);

  //body语句块
  mCurIrb = std::make_unique<llvm::IRBuilder<>>(bodyBb);
  self(obj->body);
  if (mCurIrb->GetInsertBlock()->getTerminator() == nullptr)
    mCurIrb->CreateBr(condBb);

  mCurIrb = std::make_unique<llvm::IRBuilder<>>(exitBb);

}

//==============================================================================
// 声明
//==============================================================================

void
EmitIR::operator()(Decl* obj)
{
  // TODO: 添加变量声明处理的跳转
  if (auto p = obj->dcst<VarDecl>())
    return self(p);
  if (auto p = obj->dcst<FunctionDecl>())  //函数声明
    return self(p);
  

  ABORT();
}

// TODO: 添加变量声明的处理

void
EmitIR::trans_init(llvm::Value* val, Expr* obj)
//用于将初始化表达式 obj 的值存储到 val 对应的内存中。这里只处理了最简单的情况 —— 整数字面量初始化。
{
  auto& irb = *mCurIrb;
  
  // 仅处理整数字面量的初始化
  if (auto p = obj->dcst<IntegerLiteral>()) {
    auto initVal = llvm::ConstantInt::get(self(p->type), p->val);//创建一个对应的 LLVM 整型常量
    irb.CreateStore(initVal, val);
    return;
  }

  // 变量引用初始化（如 int y = x;）//new
  if (auto p = obj->dcst<DeclRefExpr>()) {
    llvm::Value* rhs = (*this)(p); // 自动发射 load 指令，获得 x 的值
    irb.CreateStore(rhs, val);     // 把 x 的值存到当前变量（y）对应的地址 val
    return;
  }

  // 也有可能是一个一元表达式 -1；
  if(auto p = obj->dcst<UnaryExpr>()) {
    llvm::Value* rhs = (*this)(p);
    irb.CreateStore(rhs, val);
    return;
  }

  // 也有可能是一个二元表达式 a + b/数组下标表达式 a[i]
  if(auto p = obj->dcst<BinaryExpr>()) {
    llvm::Value* rhs = (*this)(p);
    irb.CreateStore(rhs, val);
    return;
  }

  // 也有可能是一个括号表达式 (a + b)；
  if(auto p = obj->dcst<ParenExpr>()) {
    llvm::Value* rhs = (*this)(p);
    irb.CreateStore(rhs, val);
    return;
  }

  // 也有可能是一个函数调用表达式 f(a, b)；
  
  if(auto p = obj->dcst<CallExpr>()) {
    llvm::Value* rhs = (*this)(p);
    irb.CreateStore(rhs, val);
    return;
  }

  //有可能是一个implicit //int e[4][2] = {{0, c[2][1]}, {3, 4}, {5, 6}, {7, 8}}; c[2][1]是一个implicit
  if(auto p = obj->dcst<ImplicitCastExpr>()){
    llvm::Value* rhs = (*this)(p);
    irb.CreateStore(rhs, val);
    return;
  }

  if (auto p = obj->dcst<InitListExpr>()) {
    llvm::ArrayType* arrType = llvm::dyn_cast<llvm::ArrayType>(self(p->type));//完整类型
    std::cout<<p->list.size()<<std::endl;//int a[4][2] = {};输出为1
    for (int i = 0; i <arrType->getNumElements(); ++i) {//我看28标准答案ll是3210逆序输出，可能和这个有关?->无关
      auto index = llvm::ConstantInt::get(llvm::Type::getInt32Ty(mCtx), i);
      auto elementPtr =
        irb.CreateInBoundsGEP(arrType, val, { irb.getInt32(0), index }); //计算应该要赋值的地址：arrType是一个数组类型，val是基地址，index是当前元素的索引
      if (i < p->list.size() ){ 
        if(auto p_sub = p->list[i]->dcst<InitListExpr>()){
          trans_init(elementPtr, p->list[i]);
        } 
        else if(auto p_sub = p->list[i]->dcst<IntegerLiteral>()){
          trans_init(elementPtr, p->list[i]);
        }
        else if(auto p_sub = p->list[i]->dcst<DeclRefExpr>()){
          trans_init(elementPtr, p->list[i]);
        }
        else if(auto p_sub = p->list[i]->dcst<BinaryExpr>()){
          trans_init(elementPtr, p->list[i]);
        }
        else if(auto p_sub = p->list[i]->dcst<UnaryExpr>()){
          trans_init(elementPtr, p->list[i]);
        }
        else if(auto p_sub = p->list[i]->dcst<ParenExpr>()){
          trans_init(elementPtr, p->list[i]);
        }
        else if(auto p_sub = p->list[i]->dcst<CallExpr>()){
          trans_init(elementPtr, p->list[i]);
        }
        else if(auto p_sub = p->list[i]->dcst<ImplicitCastExpr>()){
          trans_init(elementPtr, p->list[i]);
        }
        else{
          //int[4][2]={}============直接不处理即可  第0个位置不初始化
          // llvm::Type *pointerty = val->getType();
          // if (auto *ptrTy = llvm::dyn_cast<llvm::PointerType>(pointerty)) {
          //   llvm::Type *pointeeTy = ptrTy->getNonOpaquePointerElementType();  // 获取指针指向的类型
          //   llvm::Type *innerTy = pointeeTy->getArrayElementType();
          //   mCurIrb->CreateStore(llvm::Constant::getNullValue(innerTy), elementPtr);
          // }
        }
      }
      else{
        //new为什么要分那么多类：排除所有类型，解决空初始列表的问题int a[4][2] = {};============直接不处理即可
        //剩下的，要赋值为0
        llvm::Type* innertype= arrType->getElementType();
        mCurIrb->CreateStore(llvm::Constant::getNullValue(innertype), elementPtr);
        // llvm::Type *ty = val->getType();
        // if (auto ptrTy = llvm::dyn_cast<llvm::PointerType>(ty)) {  // 先检查是否是指针
        //     llvm::Type *pointeeTy = ptrTy->getNonOpaquePointerElementType();  // 获取指向的类型
        //     if (auto arrTy = llvm::dyn_cast<llvm::ArrayType>(pointeeTy)) {  // 检查是否是数组
        //       mCurIrb->CreateStore(llvm::Constant::getNullValue(arrTy), elementPtr);
        //     }
        // }
      }
    }
    return;
  }
  //也有可能是一个初始化列表表达式 {1, 2, 3}；
  // if (auto p = obj->dcst<InitListExpr>()) {
  //   const auto& elements = p->list;
  //   for (size_t i = 0; i < elements.size(); ++i) {
  //     llvm::Type* ty_sub=self(elements[i]->type);
  //     //根据索引列表，将指针偏移量应用于基指针val，获得结果指针subDst
  //     llvm::Value* subDst = irb.CreateInBoundsGEP(ty_sub, val, {irb.getInt64(0), irb.getInt64(i)});
  //     trans_init(subDst, elements[i]);//递归调用，最终叶子节点integerliteral
  //   }
  //   return;
  // }

  // 如果表达式不是整数字面量，则中断编译
  ABORT();
}
//教程的代码只处理了全局变量
//局部变量没有在函数体（如 CompoundStmt）中为变量分配内存，缺乏符号表或作用域机制
void
EmitIR::operator()(VarDecl* obj)
{
  std::cout<<obj->name<<std::endl;
  if (mCurFunc) {// 局部变量new
    std::cout<<"local"<<obj->name<<std::endl;
    
    //使用 alloca 指令在函数栈上进行内存分配
    //初始化有可能是数组，不能直接传ty
    llvm::Type* ty = nullptr;
    // if (auto p = obj->type->texp->dcst<ArrayType>()) {
    //   ty = llvm::ArrayType::get(self(obj->type), p->len);
    // }
    // if (auto arrTy = obj->type->texp->dcst<ArrayType>()) {
    //   llvm::Type* elemTy = getLLVMArrayType(arrTy->base.get());  // 递归
    //   ty= llvm::ArrayType::get(elemTy, arrTy->len);
    // }
    // else {
    // 普通类型
    ty = self(obj->type);//有ArrayType/functionType/PointerType
    //会调用这个函数llvm::Type*EmitIR::operator()(const Type* type)，会自动递归调用，因此信息包含2D/3D，因此trans_init不需要再CreateAlloca
    //对于数组来说，ty有ContainedType/NumElements属性

    llvm::AllocaInst* alloca = mCurIrb->CreateAlloca(ty, nullptr, obj->name);//此时的
    obj->any = alloca;

    if (obj->init) {//是否由初始化值？如果没有需要在store函数需要传一个空值
      //llvm::Value* initVal = (*this)(obj->init);//这里他可能是引用原变量expr或者是一个常量expr
      //mCurIrb->CreateStore(initVal, alloca);  // store将数据存储在某指针类型的变量指向的地址中
      trans_init(alloca, obj->init);
    }
    else{
      mCurIrb->CreateStore(llvm::Constant::getNullValue(self(obj->type)), alloca);
    }
  } 
  else {
    // 1. 创建全局变量gvar，并为全局变量暂时先指定零初始化
    auto ty = llvm::Type::getInt32Ty(mCtx); // 直接使用 LLVM 的 int32 类型
    auto gvar = new llvm::GlobalVariable(
      mMod, ty, false, llvm::GlobalVariable::ExternalLinkage, nullptr, obj->name);

    obj->any = gvar;

    // 默认初始化为 0
    gvar->setInitializer(llvm::ConstantInt::get(ty, 0));

    if (obj->init == nullptr)
      return;

    /// 2. 创建函数，完成为全局变量进行初始化的逻辑。为什么要创建函数？ 将“全局变量的初始化语句”延迟到程序一开始执行的时候由一个函数来完成。
    /// 函数返回值为 void，无参数
    /// 函数名字为 ctor
    auto mCurFunc  = llvm::Function::Create(
      mCtorTy, llvm::GlobalVariable::PrivateLinkage, "ctor_" + obj->name, mMod);
    /// 3. 将函数添加至模块 TheModule 的全局构造函数数组中,65535为优先级
    ///    优先级数值越大执行时间越靠后，优先级数值最大值为65535
    ///    模块被加载时，全局构造函数数组中的全局构造函数将按照优先级依次执行
    llvm::appendToGlobalCtors(mMod, mCurFunc , 65535);
    //因为entryBb是构造函数的入口
    // IRBuilder的参数是一个BasicBlock，表示在这个BasicBlock中生成IR
    auto entryBb = llvm::BasicBlock::Create(mCtx, "entry", mCurFunc );
    mCurIrb->SetInsertPoint(entryBb);//如果你有一个 IRBuilder 在用，那么 mCurFunc 必须是当前正在构建的那个函数，不能留空、也不能是错的函数。否则生成的 IR 会挂掉或结构混乱
    trans_init(gvar, obj->init);
    mCurIrb->CreateRet(nullptr);
  }
}


void
EmitIR::operator()(FunctionDecl* obj)
{
  std::cout<<obj->name<<std::endl;
  // 获得类型（函数），创建函数【原来的代码生成的参数形式只有返回值类型，没有参数类型，所以p=p-1会报段错误】
  //llvm::FunctionType* fty = llvm::dyn_cast<llvm::FunctionType>(self(obj->type));
  // 构造参数类型列表
  std::vector<llvm::Type*> argTypes;
  for (auto param : obj->params) {
      argTypes.push_back(self(param->type));  // 获取每个参数的 LLVM 类型
  }
  llvm::ArrayRef<llvm::Type*> argTypes_(argTypes);
  // 获取返回值类型（比如 int → i32）
  //llvm::Type* returnType = llvm::dyn_cast<llvm::Type>(self(obj->type));  // 表示函数返回值类型,self(obj->type) texp不为0
  llvm::Type* returnType=nullptr;
  if(obj->type->spec==Type::Spec::kInt) returnType=llvm::Type::getInt32Ty(mCtx);
  else if(obj->type->spec==Type::Spec::kVoid) returnType=llvm::Type::getVoidTy(mCtx);
  // 构造函数类型
  llvm::FunctionType* fty = llvm::FunctionType::get(returnType, argTypes_,false);//最后一个布尔变量表示参数处理



  llvm::Function *func = llvm::Function::Create(
    fty, llvm::GlobalVariable::ExternalLinkage, obj->name, mMod);

  obj->any = func;
  //此时函数并没有包含 基本块 BasicBlock，我们仅仅是对函数进行了声明。
  if (obj->body == nullptr)
    return;
  //为函数创建入口基本块（标签为 entry），设置 IR 插入点
  auto entryBb = llvm::BasicBlock::Create(mCtx, "entry", func);
  mCurIrb->SetInsertPoint(entryBb);
  //mCurIrb = std::make_unique<llvm::IRBuilder<>>(entryBb);//上下取其一即可
  auto& entryIrb = *mCurIrb;

  // TODO: 添加对函数参数的处理//new
  // llvm::Function::arg_iterator argIter = func->arg_begin();
  // llvm::Function::arg_iterator argEnd = func->arg_end();

  // for (int i = 0; i < obj->params.size() &&  argIter != argEnd; i++,argIter++) {
  //   asg::Decl* param = obj->params[i];
  //   llvm::AllocaInst* paramptr = mCurIrb->CreateAlloca(self(param->type), nullptr, param->name); //分配一个放参数的空间
  //   argIter->setName(param->name); //定义参数的名字
  //   //这里报段错误？argiter越界？
  //   //参数要存入符号表，后续访问变量时不要直接访问参数，而是 load 符号表里的指针值。=====不是这个问题
  //   //CreateStore第一个参数是要存储的值，不是迭代器
  //   //auto paramval = llvm::dyn_cast<llvm::Value>(argIter);
  //   llvm::Value* paramval = &*argIter; // 获取参数值
  //   entryIrb.CreateStore(paramval,paramptr);
  //   param->any = paramptr;//new copy from hyjack
  // }
  // 对函数参数的处理：局部参数声明(from hyjack)
  auto argIter = func->arg_begin();
  
  // std::cout<<"test-----cout:"<<argIter<<std::endl;
  for (int i = 0; i < obj->params.size(); i++) {
    auto param = obj->params[i];
    auto paramVar = mCurIrb->CreateAlloca(self(param->type), nullptr, param->name);
    argIter->setName(param->name);
    entryIrb.CreateStore(argIter,paramVar);
    argIter++;
  }
  // 翻译函数体/函数定义
  mCurFunc = func;
  self(obj->body);
  auto& exitIrb = *mCurIrb;

  if (!mCurIrb->GetInsertBlock()->getTerminator()) {
    if (fty->getReturnType()->isVoidTy())
      mCurIrb->CreateRetVoid();
    else
      mCurIrb->CreateUnreachable();
  }
}


