#include "Ast2Asg.hpp"
#include <unordered_map>

#define self (*this)

namespace asg {

// 符号表，保存当前作用域的所有声明
struct Ast2Asg::Symtbl : public std::unordered_map<std::string, Decl*>
{
  Ast2Asg& m;
  Symtbl* mPrev;

  Symtbl(Ast2Asg& m)
    : m(m)
    , mPrev(m.mSymtbl)
  {
    m.mSymtbl = this;
  }

  ~Symtbl() { m.mSymtbl = mPrev; }

  Decl* resolve(const std::string& name);
};

Decl*
Ast2Asg::Symtbl::resolve(const std::string& name)
{
  auto iter = find(name);
  if (iter != end())
    return iter->second;
  ASSERT(mPrev != nullptr); // 标识符未定义
  return mPrev->resolve(name);
}

TranslationUnit* //对整个翻译单元进行类型推导。这是类型推导过程的入口点。
Ast2Asg::operator()(ast::TranslationUnitContext* ctx)
{
  auto ret = make<asg::TranslationUnit>();
  if (ctx == nullptr)
    return ret;

  Symtbl localDecls(self);

  for (auto&& i : ctx->externalDeclaration()) {
    if (auto p = i->declaration()) {
      auto decls = self(p);
      ret->decls.insert(ret->decls.end(),
                        std::make_move_iterator(decls.begin()),
                        std::make_move_iterator(decls.end()));
    }

    else if (auto p = i->functionDefinition()) {
      auto funcDecl = self(p);
      ret->decls.push_back(funcDecl);

      // 添加到声明表
      localDecls[funcDecl->name] = funcDecl;
    }

    else
      ABORT();
  }

  return ret;
}

//==============================================================================
// 类型
//==============================================================================

Ast2Asg::SpecQual
Ast2Asg::operator()(ast::DeclarationSpecifiersContext* ctx)
{
  SpecQual ret = { Type::Spec::kINVALID, Type::Qual() };

  for (auto&& i : ctx->declarationSpecifier()) {
    if (auto p = i->typeSpecifier()) {
      if (ret.first == Type::Spec::kINVALID) {
        if (p->Int())
          ret.first = Type::Spec::kInt;
        else
          ABORT(); // 未知的类型说明符
      }

      else
        ABORT(); // 未知的类型说明符
    }

    else
      ABORT();
  }

  return ret;
}

std::pair<TypeExpr*, std::string>
Ast2Asg::operator()(ast::DeclaratorContext* ctx, TypeExpr* sub)
{
  std::cout<<"DeclaratorContext"<<ctx->getText()<<std::endl;
  return self(ctx->directDeclarator(), sub);
}

static int
eval_arrlen(Expr* expr)
{
  if (auto p = expr->dcst<IntegerLiteral>())
    return p->val;

  if (auto p = expr->dcst<DeclRefExpr>()) {
    if (p->decl == nullptr)
      ABORT();

    auto var = p->decl->dcst<VarDecl>();
    if (!var || !var->type->qual.const_)
      ABORT(); // 数组长度必须是编译期常量

    switch (var->type->spec) {
      case Type::Spec::kChar:
      case Type::Spec::kInt:
      case Type::Spec::kLong:
      case Type::Spec::kLongLong:
        return eval_arrlen(var->init);

      default:
        ABORT(); // 长度表达式必须是数值类型
    }
  }

  if (auto p = expr->dcst<UnaryExpr>()) {
    auto sub = eval_arrlen(p->sub);

    switch (p->op) {
      case UnaryExpr::kPos:
        return sub;

      case UnaryExpr::kNeg:
        return -sub;

      default:
        ABORT();
    }
  }

  if (auto p = expr->dcst<BinaryExpr>()) {
    auto lft = eval_arrlen(p->lft);
    auto rht = eval_arrlen(p->rht);

    switch (p->op) {
      case BinaryExpr::kAdd:
        return lft + rht;

      case BinaryExpr::kSub:
        return lft - rht;

      default:
        ABORT();
    }
  }

  if (auto p = expr->dcst<InitListExpr>()) {
    if (p->list.empty())
      return 0;
    return eval_arrlen(p->list[0]);
  }

  ABORT();
}

std::pair<TypeExpr*, std::string>
Ast2Asg::operator()(ast::DirectDeclaratorContext* ctx, TypeExpr* sub)
{
  if (auto p = ctx->Identifier())
    return { sub, p->getText() };
  //eg a[10][20]  [20] 是assignmentExpression
  if (ctx->LeftBracket()) {
    auto arrayType = make<ArrayType>();
    arrayType->sub = sub;

    if (auto p = ctx->assignmentExpression())
      arrayType->len = eval_arrlen(self(p));
    else
      arrayType->len = ArrayType::kUnLen;

    return self(ctx->directDeclarator(), arrayType);//递归调用
  }

  ABORT();
}

//==============================================================================
// 表达式
//==============================================================================

Expr*
Ast2Asg::operator()(ast::ExpressionContext* ctx)
{
  std::cout<< "ExpressionContext"<<ctx->getText()<<std::endl;

  auto list = ctx->assignmentExpression();
  Expr* ret = self(list[0]);

  for (unsigned i = 1; i < list.size(); ++i) {
    auto node = make<BinaryExpr>();
    node->op = node->kComma;
    node->lft = ret;
    node->rht = self(list[i]);
    ret = node;
  }

  return ret;
}

Expr*
Ast2Asg::operator()(ast::AssignmentExpressionContext* ctx)
{
  std::cout<<"AssignmentExpressionContext"<<ctx->getText()<<std::endl;
  //如果是logicalOrExpression分支，因为分支只有一个，就是logicalOrExpression，所以直接返回
  if (auto p = ctx->logicalOrExpression())  return self(p);

  // 如果是assignmentExpression分支，需要构造一个BinaryExpr
  auto ret = make<BinaryExpr>();
  ret->op = ret->kAssign;
  ret->lft = self(ctx->unaryExpression());
  ret->rht = self(ctx->assignmentExpression());
  return ret;
}
//new：没有写这个函数时会导致通过这个ast2asg代码进入时报错
Expr*
Ast2Asg::operator()(ast::MultiplicativeExpressionContext* ctx)
{
  auto children = ctx->children;
  Expr* ret = self(dynamic_cast<ast::UnaryExpressionContext*>(children[0]));

  for (unsigned i = 1; i < children.size(); ++i) {
    auto node = make<BinaryExpr>();

    auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                   ->getSymbol()
                   ->getType();
    switch (token) {
      case ast::Star:
        node->op = node->kMul;
        break;

      case ast::Div:
        node->op = node->kDiv;
        break;

      case ast::Mod:
        node->op = node->kMod;
        break;

      default:
        ABORT();
    }

    node->lft = ret;
    node->rht = self(dynamic_cast<ast::UnaryExpressionContext*>(children[++i]));
    ret = node;
  }
  return ret;
}

//modify
Expr*
Ast2Asg::operator()(ast::AdditiveExpressionContext* ctx)
{
  auto children = ctx->children;
  Expr* ret = self(dynamic_cast<ast::MultiplicativeExpressionContext*>(children[0]));

  for (unsigned i = 1; i < children.size(); ++i) {
    auto node = make<BinaryExpr>();

    auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                   ->getSymbol()
                   ->getType();
    switch (token) {
      case ast::Plus:
        node->op = node->kAdd;
        break;

      case ast::Minus:
        node->op = node->kSub;
        break;

      default:
        ABORT();
    }

    node->lft = ret;
    node->rht = self(dynamic_cast<ast::MultiplicativeExpressionContext*>(children[++i]));
    ret = node;
  }
  return ret;
}

Expr*
Ast2Asg::operator()(ast::UnaryExpressionContext* ctx)
{
  if (auto p = ctx->postfixExpression())
    return self(p);

  auto ret = make<UnaryExpr>();

  switch (
    dynamic_cast<antlr4::tree::TerminalNode*>(ctx->unaryOperator()->children[0])
      ->getSymbol()
      ->getType()) {
    case ast::Plus:
      ret->op = ret->kPos;
      break;

    case ast::Minus:
      ret->op = ret->kNeg;
      break;

    default:
      ABORT();
  }

  ret->sub = self(ctx->unaryExpression());

  return ret;
}

//new
Expr*
Ast2Asg::operator()(ast::LogicalOrExpressionContext* ctx)
{
  auto children = ctx->children;
  if (children.size() == 1)
    return self(dynamic_cast<ast::LogicalAndExpressionContext*>(children[0]));

  Expr* ret = self(dynamic_cast<ast::LogicalOrExpressionContext*>(children[0]));

  for (unsigned i = 1; i < children.size(); ++i) {
    auto node = make<BinaryExpr>();

    auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                   ->getSymbol()
                   ->getType();
    switch (token) {
      case ast::ExclaimEqual:
        node->op = node->kOr;
        break;

      default:
        ABORT();
    }

    node->lft = ret;
    node->rht =
      self(dynamic_cast<ast::LogicalAndExpressionContext*>(children[++i]));
    ret = node;
  }

  return ret;
}
//new
Expr*
Ast2Asg::operator()(ast::LogicalAndExpressionContext* ctx)
{
  auto children = ctx->children;
  if (children.size() == 1)
    return self(dynamic_cast<ast::EqualityExpressionContext*>(children[0]));
  //支持将语法树类型children动态转换成表达式？
  
  Expr* ret = self(dynamic_cast<ast::LogicalAndExpressionContext*>(children[0]));

  for (unsigned i = 1; i < children.size(); ++i) {
    auto node = make<BinaryExpr>();

    auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                   ->getSymbol()
                   ->getType();
    switch (token) {
      case ast::AndAnd:
        node->op = node->kAnd;
        break;

      default:
        ABORT();
    }

    node->lft = ret;
    node->rht =
      self(dynamic_cast<ast::EqualityExpressionContext*>(children[++i]));
    ret = node;
  }

  return ret;
}

//new
Expr*
Ast2Asg::operator()(ast::RelationalExpressionContext* ctx) //new
{
    // 获取所有子节点
    auto children = ctx->children;
    
    // 第一个子节点是第一个 additiveExpression
    //self(???) 返回一个指针，但具有实际价值的，是这个指针指向的实空间
    Expr* ret = self(dynamic_cast<ast::AdditiveExpressionContext*>(children[0]));

    // 遍历后续运算符和操作数
    for (size_t i = 1; i < children.size(); i += 2) {
        auto node = make<BinaryExpr>();
        
        // 获取运算符类型
        auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                       ->getSymbol()
                       ->getType();
        
        // 设置运算符类型
        switch (token) {
            case ast::Less:        node->op = BinaryExpr::kLt; break;
            case ast::Greater:     node->op = BinaryExpr::kGt; break;
            case ast::LessEqual:   node->op = BinaryExpr::kLe; break;
            case ast::GreaterEqual:node->op = BinaryExpr::kGe; break;
            default: ABORT();  // 非预期的运算符
        }

        // 设置左右操作数
        node->lft = ret;
        node->rht = self(dynamic_cast<ast::AdditiveExpressionContext*>(children[i + 1]));
        ret = node;
    }
    
    return ret;
}
//new
Expr* 
Ast2Asg::operator()(ast::EqualityExpressionContext* ctx) {//new
  auto children = ctx->children;
  Expr* ret = self(dynamic_cast<ast::RelationalExpressionContext*>(children[0]));

  for (size_t i = 1; i < children.size(); i += 2) {
      auto node = make<BinaryExpr>();
      auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                     ->getSymbol()
                     ->getType();
      
      switch (token) {
          case ast::EqualEqual: node->op = BinaryExpr::kEq; break;
          case ast::ExclaimEqual:   node->op = BinaryExpr::kNe; break;
          default: ABORT();
      }

      node->lft = ret;
      node->rht = self(dynamic_cast<ast::RelationalExpressionContext*>(children[i + 1]));
      ret = node;
  }
  return ret;
}

//modify
Expr*
Ast2Asg::operator()(ast::PostfixExpressionContext* ctx)
{
  if (auto p = ctx->primaryExpression()) {
    auto sub = self(dynamic_cast<ast::PrimaryExpressionContext*>(p));
    return sub;
  }
  if(auto p = ctx->LeftBracket()){//数组表达式a[i]
    auto ret = make<BinaryExpr>();
    ret->op = ret->kIndex;
    ret->rht = self(ctx->expression());
    ret->lft = self(ctx->postfixExpression());//递归调用
    return ret;
  }
  if(auto q=ctx->LeftParen()){ //函数调用f(a,b)
    auto ret = make<CallExpr>();
    if (auto p = ctx->postfixExpression()) {//这里没有递归调用，存异？
      auto name = p->getText();
      auto head = make<DeclRefExpr>();
      head->decl = mSymtbl->resolve(name);
      ret->head = head;
    }
  
    if (auto p = ctx->argumentExpressionList()) { //只有这个地方用到argumentExpressionList，就不额外写重载函数了
      for (auto&& i : p->assignmentExpression()) {
        ret->args.push_back(self(i));
      }
    }
    return ret;
  }
  
}

Expr*
Ast2Asg::operator()(ast::PrimaryExpressionContext* ctx)
{
  std::cout<<"primary"<<ctx->getText()<<std::endl;
  if (auto p = ctx->Identifier()) {
    auto name = p->getText();
    auto ret = make<DeclRefExpr>();
    ret->decl = mSymtbl->resolve(name);
    return ret;
  }

  if (auto p = ctx->Constant()) {
    auto text = p->getText();

    auto ret = make<IntegerLiteral>();

    ASSERT(!text.empty());
    if (text[0] != '0')
      ret->val = std::stoll(text);

    else if (text.size() == 1)
      ret->val = 0;

    else if (text[1] == 'x' || text[1] == 'X')
      ret->val = std::stoll(text.substr(2), nullptr, 16);

    else
      ret->val = std::stoll(text.substr(1), nullptr, 8);

    return ret;
  }

  if (auto p = ctx->expression()) {
    //不需要动态转换为primary,注意g4，否则会出现访问空指针的问题
    auto sub = self(dynamic_cast<ast::ExpressionContext*>(p));
    return sub;
  }

  ABORT();
}

Expr*
Ast2Asg::operator()(ast::InitializerContext* ctx)
{
  if (auto p = ctx->assignmentExpression())
    return self(p);

  auto ret = make<InitListExpr>();

  if (auto p = ctx->initializerList()) {
    for (auto&& i : p->initializer()) {
      // 将初始化列表展平
      auto expr = self(i);
      if (auto p = expr->dcst<InitListExpr>()) {
        for (auto&& sub : p->list)
          ret->list.push_back(sub);
      } else {
        ret->list.push_back(expr);
      }
    }
  }

  return ret;
}

//==============================================================================
// 语句
//==============================================================================

Stmt*
Ast2Asg::operator()(ast::StatementContext* ctx)
{
  if (auto p = ctx->compoundStatement())
    return self(p);

  if (auto p = ctx->expressionStatement())
    return self(p);

  if (auto p = ctx->jumpStatement())
    return self(p);

  if (auto p = ctx->selectionStatement())
    return self(p);
  ABORT();
}

CompoundStmt*
Ast2Asg::operator()(ast::CompoundStatementContext* ctx)
{
  auto ret = make<CompoundStmt>();

  if (auto p = ctx->blockItemList()) {
    Symtbl localDecls(self);

    for (auto&& i : p->blockItem()) {
      if (auto q = i->declaration()) {
        auto sub = make<DeclStmt>();
        sub->decls = self(q);
        ret->subs.push_back(sub);
      }

      else if (auto q = i->statement())
        ret->subs.push_back(self(q));

      else
        ABORT();
    }
  }

  return ret;
}

Stmt*
Ast2Asg::operator()(ast::ExpressionStatementContext* ctx)
{
  if (auto p = ctx->expression()) {
    auto ret = make<ExprStmt>();
    ret->expr = self(p);
    return ret;
  }

  return make<NullStmt>();
}

Stmt*
Ast2Asg::operator()(ast::JumpStatementContext* ctx)
{
  std::cout<<ctx->getText()<<std::endl;
  if (ctx->Return()) {
    auto ret = make<ReturnStmt>();
    ret->func = mCurrentFunc;
    if (auto p = ctx->expression())
      ret->expr = self(p);
    return ret;
  }

  ABORT();
}
//new
Stmt*
Ast2Asg::operator()(ast::SelectionStatementContext* ctx)
{
  /*
  struct IfStmt : Stmt
  {
    Expr* cond{ nullptr };
    Stmt *then{ nullptr }, *else_{ nullptr };
  };
  */
  //34还没去到这里就停了，说明语法分析就出了问题
  std::cout<<ctx->getText() <<std::endl;
  auto ret = make<IfStmt>();
  ret->cond = self(ctx->expression());
  ASSERT(ctx->statement().size() >= 1);
  // Handle then clause
  auto statements = ctx->statement();
  if (statements.size() > 0)
      ret->then = self(statements[0]);
  
  // Handle else clause
  if (statements.size() > 1)
      ret->else_ = self(statements[1]);
  
  return ret;

}
//==============================================================================
// 声明
//==============================================================================

std::vector<Decl*>
Ast2Asg::operator()(ast::DeclarationContext* ctx)
{
  std::vector<Decl*> ret;

  auto specs = self(ctx->declarationSpecifiers());

  if (auto p = ctx->initDeclaratorList()) {
    for (auto&& j : p->initDeclarator())
      ret.push_back(self(j, specs));
  }

  // 如果 initDeclaratorList 为空则这行声明语句无意义
  return ret;
}

FunctionDecl*
Ast2Asg::operator()(ast::FunctionDefinitionContext* ctx){
  std::cout<<"FunctionDefinitionContext"<<ctx->getText()<<std::endl;
  auto ret = make<FunctionDecl>();
  mCurrentFunc = ret;
  
  auto type = make<Type>();
  ret->type = type;
  
  auto sq = self(ctx->declarationSpecifiers());
  type->spec = sq.first, type->qual = sq.second;
  
  auto [texp, name] = self(ctx->directDeclarator(), nullptr);//右侧调用的函数为 std::pair<TypeExpr*, std::string> Ast2Asg::operator()(ast::Direct_declaratorContext* ctx, TypeExpr* sub)
  //这里解释一下texp的类型，即TypeExpr*，你可以简单认为他是处理数组定义的，例如对于int a[5][3]，TypeExpr*负责记录这些维度的长度
  //那么texp作为一个指针类型，即TypeExpr*类型，这个指针若非空，是要指向一个实空间的，一个例子便是指向 make<ArrayType>(); 的实空间
  //按Ctrl点开 ArrayType 跳转到定义，发现struct ArrayType : TypeExpr{
  //TypeExpr作为父亲类有一个指针成员sub，而ArrayType作为儿子类有一个int类型
  //当然ArrayType是继承了父亲类的，可以认为ArrayType有一个指针成员sub有一个int类型一共两项内容。
  //于是texp这个TypeExpr*类型可以指向一个ArrayType；
  //这个ArrayType的int成员记录下第一维的长度5（用上文的例子）、sub成员则指向另一个ArrayType（用于记录第二维度的长度3）
  //实际上这就是一个链表结构，你可以从右侧这个函数一窥这个“链表”是怎么造出来的 std::pair<TypeExpr*, std::string> Ast2Asg::operator()(ast::Direct_declaratorContext* ctx, TypeExpr* sub)


  auto funcType = make<FunctionType>();
  funcType->sub = texp;
  type->texp = funcType;
  ret->name = std::move(name);
  //观察代码，发现有三层结构，
  //auto ret = make<FunctionDecl>();
  //auto type = make<Type>();
  //auto funcType = make<FunctionType>();
  //其中ret明显是完整描述整个函数的，type则由type->spec type->qual可以看出来有限定的功能（例如Const）
  //此外按照type的意义，实际上这个type能够完整描述除了实际取值外，该函数的所有【返回类型、参数类型】，但是不知道参数名字，例如函数int a[2][4](int b,char c[3]);那么只看type就能知道返回一个int[2][4]，参数是int ,char [3]
  //由于type的make<Type>()类型不能带参数列表，因此type通过type->texp=funcType指向了它的代理人，让代理人来存放参数列表
  //funcType作为type的代理人，它有两项内容，参数列表params以及TypeExpr*指针sub，我们还是用函数int a[2][4](int b,char c[3]);的例子
  //funcType的sub用来存放[2][4]，参数列表params第一项存放int ，第二项存放char [3]
  //ret存放函数名name，函数实现body，以及一个参数列表（含有参数名字）
  //注：我们不考虑int a[2][4](int b=10,char c[3]);这种带默认值的
  
  Symtbl localDecls(self);

  if(auto plist = ctx->parameterList()){
    for (auto&& param : plist->parameterDeclaration()) {
      auto paramDecl = self(param);//param的实空间是make<VarDecl>()
      funcType->params.push_back(paramDecl->type);
      ret->params.push_back(paramDecl);
      localDecls[paramDecl->name] = paramDecl;//本地符号表，保存当前作用域的所有声明
    }
  }
  (*mSymtbl)[ret->name] = ret; // 立刻注册到符号表
  if(ctx->compoundStatement()){
      ret->body = self(ctx->compoundStatement());
  }
  //为什么main函数没有放进符号表
  std::cout << "Lookup func in symtbl: " << (mSymtbl->count("func") ? "found" : "not found") << std::endl;

  //将函数定义加入符号表，以允许递归调用
  //当函数定义未加入符号表时，调用 self(ctx->compound_statement()) 会炸，
  //例如归并排序msort的函数实现本身就带有递归自调用msort，此时 self(ctx->compound_statement()) 在内部识别到 msort(l,r) 而生成一个 make<CallExpr> 节点，
  //但由于函数名未加入符号表，于是助教们写的代码给你 ABORT(); 了
  // if(((*mSymtbl)[ret->name])==nullptr){
  //   (*mSymtbl)[ret->name] = ret;
  //   if(ctx->compoundStatement())
  //     ret->body = self(ctx->compoundStatement());
  // }
  // else{//有时也会重定义，这时我们可以保留那种带有ret->body的函数声明
  //   if(ctx->compoundStatement()){
  //     (*mSymtbl)[ret->name] = ret;
  //     ret->body = self(ctx->compoundStatement());
  //   }
  // }
  
  return ret;
}

//new
Decl*
Ast2Asg::operator()(ast::ParameterDeclarationContext* ctx)
{
  auto sq = self(ctx->declarationSpecifiers());
  auto [texp, name] = self(ctx->declarator(), nullptr);
  auto type = make<Type>();
  type->spec = sq.first;
  type->qual = sq.second;
  type->texp = texp;
  auto decl = make<VarDecl>();////////////30卡了很久
  decl->type =type;
  decl->name = name;
  return decl;
}


Decl*
Ast2Asg::operator()(ast::InitDeclaratorContext* ctx, SpecQual sq)
{
  auto [texp, name] = self(ctx->declarator(), nullptr);
  Decl* ret;

  if (auto funcType = texp->dcst<FunctionType>()) {
    auto fdecl = make<FunctionDecl>();
    auto type = make<Type>();
    fdecl->type = type;

    type->spec = sq.first;
    type->qual = sq.second;
    type->texp = funcType;

    fdecl->name = std::move(name);
    for (auto p : funcType->params) {
      auto paramDecl = make<VarDecl>();
      paramDecl->type = p;
      fdecl->params.push_back(paramDecl);
    }

    if (ctx->initializer())
      ABORT();
    fdecl->body = nullptr;

    ret = fdecl;
  }

  else {
    auto vdecl = make<VarDecl>();
    auto type = make<Type>();
    vdecl->type = type;

    type->spec = sq.first;
    type->qual = sq.second;
    type->texp = texp;
    vdecl->name = std::move(name);

    if (auto p = ctx->initializer())
      vdecl->init = self(p);
    else
      vdecl->init = nullptr;

    ret = vdecl;
  }

  // 这个实现允许符号重复定义，新定义会取代旧定义
  (*mSymtbl)[ret->name] = ret;
  return ret;
}

//new



} // namespace asg
