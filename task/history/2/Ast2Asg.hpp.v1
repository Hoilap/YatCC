#pragma once

#include "SYsUParser.h"
#include "asg.hpp"



namespace asg {//asg 是一个命名空间，里面定义了类 Ast2Asg


//new

// struct IfStmt : asg::Stmt {//asg有定义
//   Expr* cond = nullptr;
//   Stmt* thenStmt = nullptr;
//   Stmt* elseStmt = nullptr;
// };

// struct FunctionType : asg::TypeExpr {
//   std::vector<asg::TypeExpr*> params;
//   TypeExpr* sub = nullptr;
// };
//new


using ast = SYsUParser;//ast 是 SYsUParser的别名（alias）

class Ast2Asg
{
public:
  Obj::Mgr& mMgr;

  Ast2Asg(Obj::Mgr& mgr)
    : mMgr(mgr)
  {
  }

  TranslationUnit* operator()(ast::TranslationUnitContext* ctx);

  //============================================================================
  // 类型
  //============================================================================

  using SpecQual = std::pair<Type::Spec, Type::Qual>;

  SpecQual operator()(ast::DeclarationSpecifiersContext* ctx);

  std::pair<TypeExpr*, std::string> operator()(ast::DeclaratorContext* ctx,
                                               TypeExpr* sub);

  TypeExpr* operator()(ast::DeclaratorSuffixContext* ctx, TypeExpr* sub);

  std::vector<TypeExpr*> operator()(ast::ParameterListContext* ctx);
  //============================================================================
  // 表达式
  //============================================================================

  Expr* operator()(ast::ExpressionContext* ctx);

  Expr* operator()(ast::LogicalOrExpressionContext* ctx);

  Expr* operator()(ast::LogicalAndExpressionContext* ctx);

  Expr* operator()(ast::AssignmentExpressionContext* ctx);

  Expr* operator()(ast::MultiplicativeExpressionContext* ctx);
  
  Expr* operator()(ast::AdditiveExpressionContext* ctx);

  Expr* operator()(ast::UnaryExpressionContext* ctx);

  Expr* operator()(ast::PostfixExpressionContext* ctx);

  Expr* operator()(ast::PrimaryExpressionContext* ctx);

  Expr* operator()(ast::RelationalExpressionContext* ctx);

  Expr* operator()(ast::EqualityExpressionContext* ctx) ;//new

  Expr* operator()(ast::InitializerContext* ctx);

  //============================================================================
  // 语句
  //============================================================================

  Stmt* operator()(ast::StatementContext* ctx);

  CompoundStmt* operator()(ast::CompoundStatementContext* ctx);

  Stmt* operator()(ast::ExpressionStatementContext* ctx);

  Stmt* operator()(ast::JumpStatementContext* ctx);

  Stmt* operator()(ast::SelectionStatementContext* ctx);//new

  Stmt* operator()(ast::IterationStatementContext* ctx);
  //============================================================================
  // 声明
  //============================================================================

  std::vector<Decl*> operator()(ast::DeclarationContext* ctx);

  FunctionDecl* operator()(ast::FunctionDefinitionContext* ctx);

  VarDecl*  operator()(ast::ParameterDeclarationContext* ctx);

  Decl* operator()(ast::InitDeclaratorContext* ctx, SpecQual sq);

private:
  struct Symtbl;
  Symtbl* mSymtbl{ nullptr };

  FunctionDecl* mCurrentFunc{ nullptr };

  template<typename T, typename... Args>
  T* make(Args... args)
  {
    return mMgr.make<T>(args...);
  }
};

} // namespace asg
