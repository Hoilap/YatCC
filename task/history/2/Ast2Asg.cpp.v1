#include "Ast2Asg.hpp"
#include <unordered_map>

#define self (*this)

namespace asg {

// 符号表，保存当前作用域的所有声明
struct Ast2Asg::Symtbl : public std::unordered_map<std::string, Decl*>
{
  Ast2Asg& m;
  Symtbl* mPrev;

  Symtbl(Ast2Asg& m)
    : m(m)
    , mPrev(m.mSymtbl)
  {
    m.mSymtbl = this;
  }

  ~Symtbl() { m.mSymtbl = mPrev; }

  Decl* resolve(const std::string& name);
};

Decl* Ast2Asg::Symtbl::resolve(const std::string& name)
{
  auto iter = find(name);
  if (iter != end())
    return iter->second;
  ASSERT(mPrev != nullptr); // 标识符未定义
  return mPrev->resolve(name);
}

TranslationUnit*
Ast2Asg::operator()(ast::TranslationUnitContext* ctx)
{
  auto ret = make<asg::TranslationUnit>();
  if (ctx == nullptr)
    return ret;

  Symtbl localDecls(self);

  for (auto&& i : ctx->externalDeclaration()) {
    if (auto p = i->declaration()) {
      auto decls = self(p);
      ret->decls.insert(ret->decls.end(),
                        std::make_move_iterator(decls.begin()),
                        std::make_move_iterator(decls.end()));
    }

    else if (auto p = i->functionDefinition()) {
      auto funcDecl = self(p);
      ret->decls.push_back(funcDecl);

      // 添加到声明表
      localDecls[funcDecl->name] = funcDecl;
    }

    else
      ABORT();
  }

  return ret;
}

//==============================================================================
// 类型
//==============================================================================

Ast2Asg::SpecQual
Ast2Asg::operator()(ast::DeclarationSpecifiersContext* ctx)
{
  SpecQual ret = { Type::Spec::kINVALID, Type::Qual() };

  for (auto&& i : ctx->declarationSpecifier()) { //ctx->declarationSpecifier()返回的是一个向量DeclarationSpecifierContext(由ast/g4定义)
    if (auto p = i->typeSpecifier()) {
      //std::cout<<"p->getText() = "<<p->getText()<<std::endl;
      if (p->Const()) {
        ret.second.const_ = true; // 标记为 const
      }
      if (ret.first == Type::Spec::kINVALID) {
        if (p->Int())
          ret.first = Type::Spec::kInt;
        else if(p->Void()){
          ret.first = Type::Spec::kVoid;
        }
        else
          ABORT(); // 未知的类型说明符
      }
      else
        ABORT(); // 未知的类型说明符
    }

    else
      ABORT();
  }

  return ret;
}


static int
eval_arrlen(Expr* expr)
{
  if (auto p = expr->dcst<IntegerLiteral>())
    return p->val;

  if (auto p = expr->dcst<DeclRefExpr>()) {
    if (p->decl == nullptr)
      ABORT();

    auto var = p->decl->dcst<VarDecl>();
    if (!var || !var->type->qual.const_)
      ABORT(); // 数组长度必须是编译期常量

    switch (var->type->spec) {
      case Type::Spec::kChar:
      case Type::Spec::kInt:
      case Type::Spec::kLong:
      case Type::Spec::kLongLong:
        return eval_arrlen(var->init);

      default:
        ABORT(); // 长度表达式必须是数值类型
    }
  }

  if (auto p = expr->dcst<UnaryExpr>()) {
    auto sub = eval_arrlen(p->sub);

    switch (p->op) {
      case UnaryExpr::kPos:
        return sub;

      case UnaryExpr::kNeg:
        return -sub;

      default:
        ABORT();
    }
  }

  if (auto p = expr->dcst<BinaryExpr>()) {
    auto lft = eval_arrlen(p->lft);
    auto rht = eval_arrlen(p->rht);

    switch (p->op) {
      case BinaryExpr::kAdd:
        return lft + rht;

      case BinaryExpr::kSub:
        return lft - rht;

      default:
        ABORT();
    }
  }

  if (auto p = expr->dcst<InitListExpr>()) {
    if (p->list.empty())
      return 0;
    return eval_arrlen(p->list[0]);
  }

  ABORT();
}

//方法接收一个声明上下文和可能的子类型表达式（例如int a[5][6],母类型就是int [5][6] 子类型就是int[6]），并返回一个包含类型表达式TypeExpr*和变量名std::string的pair。
std::pair<TypeExpr*, std::string>
Ast2Asg::operator()(ast::DeclaratorContext* ctx, TypeExpr* sub)
{
  // declarator//标识符+其他后缀
  //   : Identifier declaratorSuffix*
  //   ;
  //因为这里是*，所以我们要循环
  // 获取变量名
  std::string name = ctx->Identifier()->getText();
  // 顺序处理 declaratorSuffix*,注意应该倒过来处理
  auto suffixes = ctx->declaratorSuffix();//是一个DeclaratorSuffixContext的向量
  for (auto it = suffixes.rbegin(); it != suffixes.rend(); ++it) {
      std::cout<<"it=" << (*it)->getText()<<std::endl;
      sub = self(*it, sub);  // 注意 self 返回的是 pair
  }
  return {sub, name};

  //self==(*this)也就是调用当前类的 operator() 成员函数
  //return self(ctx->declaratorSuffix(), sub);
}


//Q sub到底是一个什么东西？是子部分的类型？
//Q 如何确定返回的是什么？
TypeExpr*
Ast2Asg::operator()(ast::DeclaratorSuffixContext* ctx, TypeExpr* sub)
{
  std::cout<<ctx->getText()<<std::endl;
  // Handle array types
  if (ctx->LeftBracket()) {
      auto arrayType = make<ArrayType>();
      arrayType->sub = sub;

      if (auto p = ctx->assignmentExpression())
          arrayType->len = eval_arrlen(self(p));
      else
          arrayType->len = ArrayType::kUnLen;

      return arrayType;
  }

  // Handle function parameters
  if (ctx->LeftParen()) {
      auto funcType = make<FunctionType>();
      funcType->sub = sub;
      
      if (auto p = ctx->parameterList()) {
          for (auto&& param : p->parameterDeclaration()) {
              VarDecl* paramDecl= make<VarDecl>();
              funcType->params.push_back(paramDecl->type);  // ✅ 取类型进函数类型列表
          }
      }
      return funcType;
  }
  ABORT();
}


//==============================================================================
// 表达式
//==============================================================================
Expr* 
Ast2Asg::operator()(ast::LogicalOrExpressionContext* ctx) {
  auto list = ctx->logicalAndExpression();
  Expr* ret = self(list[0]); // 先处理第一个逻辑与表达式

  for (unsigned i = 1; i < list.size(); ++i) {
    auto node = make<BinaryExpr>();
    node->op = BinaryExpr::kOr; // 逻辑或运算符（你自己定义的枚举值）
    node->lft = ret;
    node->rht = self(list[i]);
    ret = node;
  }

  return ret;
}


Expr* 
Ast2Asg::operator()(ast::LogicalAndExpressionContext* ctx) {
  auto list = ctx->equalityExpression();
  Expr* ret = self(list[0]); // 先处理第一个相等表达式

  for (unsigned i = 1; i < list.size(); ++i) {
    auto node = make<BinaryExpr>();
    node->op = BinaryExpr::kAnd; // 逻辑与运算符（你自己定义的枚举值）
    node->lft = ret;
    node->rht = self(list[i]);
    ret = node;
  }

  return ret;
}


Expr*
Ast2Asg::operator()(ast::ExpressionContext* ctx)
{
  auto list = ctx->assignmentExpression(); //返回一个向量
  Expr* ret = self(list[0]);

  for (unsigned i = 1; i < list.size(); ++i) {
    auto node = make<BinaryExpr>();
    node->op = node->kComma;
    node->lft = ret;
    node->rht = self(list[i]); //list[i]是一个新分配的对象AssignmentExpressionContext
    ret = node;
  }

  return ret;
}

Expr*
Ast2Asg::operator()(ast::AssignmentExpressionContext* ctx)
{
  if (auto p = ctx->logicalOrExpression())
    return self(p);

  auto ret = make<BinaryExpr>();
  ret->op = ret->kAssign;
  ret->lft = self(ctx->unaryExpression());
  ret->rht = self(ctx->assignmentExpression());
  return ret;
}
Expr*
Ast2Asg::operator()(ast::MultiplicativeExpressionContext* ctx)
{
  auto children = ctx->children;
  Expr* ret = self(dynamic_cast<ast::UnaryExpressionContext*>(children[0]));

  for (unsigned i = 1; i < children.size(); ++i) {
    auto node = make<BinaryExpr>();

    auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                   ->getSymbol()
                   ->getType();
    switch (token) {
      case ast::Star:
        node->op = node->kMul;
        break;

      case ast::Div:
        node->op = node->kDiv;
        break;

      case ast::Mod:
        node->op = node->kMod;
        break;

      default:
        ABORT();
    }

    node->lft = ret;
    node->rht = self(dynamic_cast<ast::UnaryExpressionContext*>(children[++i]));
    ret = node;
  }

  return ret;
}

Expr*
Ast2Asg::operator()(ast::AdditiveExpressionContext* ctx)
{
  auto children = ctx->children; //childrens是该棵语法树的子节点（一串）
  Expr* ret = self(dynamic_cast<ast::MultiplicativeExpressionContext*>(children[0])); 
  //解析 AdditiveExpression 的 第一个一元表达式，存入 ret。

  for (unsigned i = 1; i < children.size(); ++i) {
    //遍历 AdditiveExpression 的剩余子节点，children[i] 代表 + 或 - 号。
    auto node = make<BinaryExpr>();
    //创建了一个字节点，应该是一个一元表达式BinaryExpr
    //asg已经定义好了所有的表达式类型，点进去可以看到该类的属性op/lft/rgt等，我们要修改他们
    //ast上下文
    // 处理整个编译单元（TranslationUnit）。
    // 转换类型说明符（DeclarationSpecifiersContext）和声明符（DeclaratorContext、DirectDeclaratorContext）。
    // 转换各种表达式（如AssignmentExpressionContext、AdditiveExpressionContext等）。
    // 转换语句（StatementContext、CompoundStatementContext等）。
    // 转换声明和函数定义（DeclarationContext、FunctionDefinitionContext等）。
    //asg 语句
    //Decl/stmt/expr/type
    auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                   ->getSymbol()
                   ->getType();
    switch (token) {
      case ast::Plus:
        node->op = node->kAdd;
        break;

      case ast::Minus:
        node->op = node->kSub;
        break;

      default:
        ABORT();
    }

    //左子树 (lft)：当前 ret 存储的 Expr 作为左操作数。
    //右子树 (rht)：解析下一个 unaryExpression，作为右操作数。
    //更新 ret，使其指向最新的 BinaryExpr 节点，形成 二叉树结构。
    node->lft = ret;
    node->rht = self(dynamic_cast<ast::MultiplicativeExpressionContext*>(children[++i]));
    ret = node;
  }
  //例子：1 + 2 - 3
  /*
  第一轮：解析 1，存入 ret。
	遇到 +：生成 BinaryExpr，左子树是 1，右子树是 2。
	遇到 -：生成 BinaryExpr，左子树是 + 号表达式，右子树是 3。
  */
  return ret;
}

Expr*
Ast2Asg::operator()(ast::UnaryExpressionContext* ctx)
{
  if (auto p = ctx->postfixExpression())
    return self(p);
  //我们做的就是让指针们指向正确的 make 出来的实空间，这个实空间往往也具备一些指针成员，指向其他的实空间
  auto ret = make<UnaryExpr>();

  switch (
    dynamic_cast<antlr4::tree::TerminalNode*>(ctx->unaryOperator()->children[0])
      ->getSymbol()
      ->getType()) {
    case ast::Plus:
      ret->op = ret->kPos;
      break;

    case ast::Minus:
      ret->op = ret->kNeg;
      break;

    default:
      ABORT();
  }

  ret->sub = self(ctx->unaryExpression());

  return ret;
}

Expr*
Ast2Asg::operator()(ast::RelationalExpressionContext* ctx) //new
{
    // 获取所有子节点
    auto children = ctx->children;
    
    // 第一个子节点是第一个 additiveExpression
    //self(???) 返回一个指针，但具有实际价值的，是这个指针指向的实空间
    Expr* ret = self(dynamic_cast<ast::AdditiveExpressionContext*>(children[0]));

    // 遍历后续运算符和操作数
    for (size_t i = 1; i < children.size(); i += 2) {
        auto node = make<BinaryExpr>();
        
        // 获取运算符类型
        auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                       ->getSymbol()
                       ->getType();
        
        // 设置运算符类型
        switch (token) {
            case ast::Less:        node->op = BinaryExpr::kLt; break;
            case ast::Greater:     node->op = BinaryExpr::kGt; break;
            case ast::LessEqual:   node->op = BinaryExpr::kLe; break;
            case ast::GreaterEqual:node->op = BinaryExpr::kGe; break;
            default: ABORT();  // 非预期的运算符
        }

        // 设置左右操作数
        node->lft = ret;
        node->rht = self(dynamic_cast<ast::AdditiveExpressionContext*>(children[i + 1]));
        ret = node;
    }
    
    return ret;
}
Expr* 
Ast2Asg::operator()(ast::EqualityExpressionContext* ctx) {//new
  auto children = ctx->children;
  Expr* ret = self(dynamic_cast<ast::RelationalExpressionContext*>(children[0]));

  for (size_t i = 1; i < children.size(); i += 2) {
      auto node = make<BinaryExpr>();
      auto token = dynamic_cast<antlr4::tree::TerminalNode*>(children[i])
                     ->getSymbol()
                     ->getType();
      
      switch (token) {
          case ast::EqualEqual: node->op = BinaryExpr::kEq; break;
          case ast::ExclaimEqual:   node->op = BinaryExpr::kNe; break;
          default: ABORT();
      }

      node->lft = ret;
      node->rht = self(dynamic_cast<ast::RelationalExpressionContext*>(children[i + 1]));
      ret = node;
  }
  return ret;
}
Expr*
Ast2Asg::operator()(ast::PostfixExpressionContext* ctx)
{
  //self(x) 是处理子节点生成对应 Expr* 的调用
  auto children = ctx->children;
  auto sub = self(dynamic_cast<ast::PrimaryExpressionContext*>(children[0]));

  return sub;
}

Expr*
Ast2Asg::operator()(ast::PrimaryExpressionContext* ctx)
{

  if (auto p = ctx->Identifier()) {
    auto name = p->getText();
    auto ret = make<DeclRefExpr>();
    ret->decl = mSymtbl->resolve(name);
    return ret;
  }

  if (auto p = ctx->Constant()) {
    auto text = p->getText();

    auto ret = make<IntegerLiteral>();

    ASSERT(!text.empty());
    if (text[0] != '0')
      ret->val = std::stoll(text);

    else if (text.size() == 1)
      ret->val = 0;

    else if (text[1] == 'x' || text[1] == 'X')
      ret->val = std::stoll(text.substr(2), nullptr, 16);

    else
      ret->val = std::stoll(text.substr(1), nullptr, 8);

    return ret;
  }
  
  // 新增：处理括号表达式 (expression)
  if (auto p = ctx->expression()) {
    // 直接返回括号内的表达式，不需要额外节点
    return self(p);
  }
  ABORT();
}

Expr*
Ast2Asg::operator()(ast::InitializerContext* ctx)
{
  //注意这是一个递归文法
  if (auto p = ctx->assignmentExpression())
    return self(p);

  auto ret = make<InitListExpr>();

  if (auto p = ctx->initializerList()) {
    for (auto&& i : p->initializer()) {
      // 将初始化列表展平
      auto expr = self(i);
      if (auto p = expr->dcst<InitListExpr>()) {
        for (auto&& sub : p->list)
          ret->list.push_back(sub);
      } else {
        ret->list.push_back(expr);
      }
    }
  }

  return ret;
}
//new
VarDecl*
Ast2Asg::operator()(ast::ParameterDeclarationContext* ctx)
{
  auto sq = self(ctx->declarationSpecifiers());
  auto [texp, name] = self(ctx->declarator(), nullptr);
  auto type = make<Type>();
  type->spec = sq.first;
  type->qual = sq.second;
  type->texp = texp;
  auto decl = make<VarDecl>();
  decl->type =type;
  decl->name = name;
  return decl;
}

//==============================================================================
// 语句
//==============================================================================

Stmt*
Ast2Asg::operator()(ast::StatementContext* ctx)
{
  if (auto p = ctx->compoundStatement())
    return self(p);

  if (auto p = ctx->expressionStatement())
    return self(p);

  if (auto p = ctx->jumpStatement())
    return self(p);

  if (auto p = ctx->selectionStatement())
    return self(p);
  ABORT();
}

CompoundStmt*
Ast2Asg::operator()(ast::CompoundStatementContext* ctx)
{
  auto ret = make<CompoundStmt>();

  if (auto p = ctx->blockItemList()) {
    Symtbl localDecls(self);

    for (auto&& i : p->blockItem()) {
      if (auto q = i->declaration()) {
        auto sub = make<DeclStmt>();
        sub->decls = self(q);
        ret->subs.push_back(sub);
      }

      else if (auto q = i->statement())
        ret->subs.push_back(self(q));

      else
        ABORT();
    }
  }

  return ret;
}

Stmt*
Ast2Asg::operator()(ast::ExpressionStatementContext* ctx)
{
  if (auto p = ctx->expression()) {
    auto ret = make<ExprStmt>();
    ret->expr = self(p);
    return ret;
  }

  return make<NullStmt>();
}

Stmt*
Ast2Asg::operator()(ast::JumpStatementContext* ctx)
{
  if (ctx->Return()) {
    auto ret = make<ReturnStmt>();
    ret->func = mCurrentFunc;
    if (auto p = ctx->expression()) {
      std::cout<<p->getText() <<std::endl;
      ret->expr = self(p);
    }
    return ret;
  }

  ABORT();
}

//new
Stmt*
Ast2Asg::operator()(ast::SelectionStatementContext* ctx)
{
  /*
  struct IfStmt : Stmt
  {
    Expr* cond{ nullptr };
    Stmt *then{ nullptr }, *else_{ nullptr };
  };
  */
  //还没去到这里就停了，说明语法分析就出了问题
  std::cout<<ctx->getText() <<std::endl;
  auto ret = make<IfStmt>();
  ret->cond = self(ctx->assignmentExpression());
  
  // Handle then clause
  auto statements = ctx->statement();
  if (statements.size() > 0)
      ret->then = self(statements[0]);
  
  // Handle else clause
  if (statements.size() > 1)
      ret->else_ = self(statements[1]);
  
  return ret;

}
//new
Stmt*
Ast2Asg::operator()(ast::IterationStatementContext* ctx)
{
    if (ctx->While()) {
        auto ret = make<WhileStmt>();
        ret->cond = self(ctx->expression());
        ret->body = self(ctx->statement());
        return ret;
    }
    ABORT();
}

//==============================================================================
// 声明
//==============================================================================

std::vector<Decl*>
Ast2Asg::operator()(ast::DeclarationContext* ctx)
{
  std::vector<Decl*> ret;
  std::cout<<"ctx->getText() = "<<ctx->getText()<<std::endl;
  auto specs = self(ctx->declarationSpecifiers());

  if (auto p = ctx->initDeclaratorList()) {
    for (auto&& j : p->initDeclarator()){
      std::cout<<"j->getText() = "<<j->getText()<<std::endl;
      ret.push_back(self(j, specs));
    }

  }

  // 如果 initDeclaratorList 为空则这行声明语句无意义
  return ret;
}

//new
// std::vector<TypeExpr*> Ast2Asg::operator()(ast::ParameterListContext* ctx)
// {
//   std::vector<TypeExpr*> ret;
//   for (auto* param : ctx->parameterDeclaration()) {
//     ret.push_back(self(param));
//   }
//   return ret;
// }

//my version + rfr
FunctionDecl*
Ast2Asg::operator()(ast::FunctionDefinitionContext* ctx)
{
  //为什么返回一个函数声明？因为定义包括了声明
  auto ret = make<FunctionDecl>();
  mCurrentFunc = ret;

  auto type = make<Type>();
  ret->type = type;
  //type有texp/spec/qual三个成员
  auto sq = self(ctx->declarationSpecifiers());
  type->spec = sq.first, type->qual = sq.second;

  auto [texp, name] = self(ctx->declarator(), nullptr);//为了适应做了改动
  //texp 是 TypeExpr* 类型的指针，TypeExpr*负责记录这些维度的长度
  //对一个二维数组的声明int a[5][3]：这个ArrayType的int成员记录下第一维的长度5（用上文的例子）、sub成员则指向另一个ArrayType（用于记录第二维度的长度3）
  //在这里，texp是一个函数类型funcType
  auto funcType = make<FunctionType>();
  funcType->sub = texp;
  type->texp = funcType; 
  ret->name = std::move(name);

  // Symtbl localDecls(self);

  // //modify：本地符号表，保存当前作用域的所有声明
  // if (auto p = ctx->parameterList()) {
  //   for(auto&& i : p->parameterDeclaration()) {
  //     auto decl = self(i);
  //     localDecls[decl->name] = decl;
  //     funcType->params.push_back(decl);
  //     ret->params.push_back(decl->);
  //   }
  //   auto children = p->children; //要使用children成员，必须是一个vector
  //   for (auto i = 0; i < children.size(); i += 3) {
  //     auto specs =
  //       self(dynamic_cast<ast::DeclarationSpecifiersContext*>(children[i]));
  //     ret->params.push_back(self(
  //       dynamic_cast<ast::InitDeclaratorContext*>(children[i + 1]), specs));
  //   }
  // }

  Symtbl localDecls(self);  // 本地符号表，保存当前作用域的所有声明

  if (auto plist = ctx->parameterList()) {
      for (auto&& param : plist->parameterDeclaration()) {
          //Decl* paramDecl = self(param);  // self(param) 应该返回一个 Decl* 或 ParamDecl*
          Decl* paramDecl= make<VarDecl>();
          if (!paramDecl) continue;  // 防御性检查，避免空指针
          localDecls[paramDecl->name] = paramDecl;      // ✅ 存入局部符号表
          funcType->params.push_back(paramDecl->type);  // ✅ 取类型进函数类型列表
          ret->params.push_back(paramDecl);             // ✅ 记录形参声明
          
      }
  }
  // 函数定义在签名之后就加入符号表，以允许递归调用
  //(*mSymtbl)[ret->name] = ret;
  //ret->body = self(ctx->compoundStatement());
  if(((*mSymtbl)[ret->name])==nullptr){
    (*mSymtbl)[ret->name] = ret;
    if(ctx->compoundStatement())
      ret->body = self(ctx->compoundStatement());
  }
  else{//有时也会重定义，这时我们可以保留那种带有ret->body的函数声明
    if(ctx->compoundStatement()){
      (*mSymtbl)[ret->name] = ret;
      ret->body = self(ctx->compoundStatement());
    }
  }

  return ret;
}

Decl*
Ast2Asg::operator()(ast::InitDeclaratorContext* ctx, SpecQual sq)
{
  ////////////////////////////////int传不进去
  std::cout<<"InitDeclaratorContext* ctx"<<ctx->getText()<<std::endl;

  auto [texp, name] = self(ctx->declarator(), nullptr);
  std::cout<<"name"<<name<<std::endl;
  Decl* ret;
  //new
  if (auto arrayType = texp->dcst<ArrayType>()) {
    auto vdecl = make<VarDecl>();
    auto type = make<Type>();
    vdecl->type = type;
    
    type->spec = sq.first;
    type->qual = sq.second;
    type->texp = texp;
    vdecl->name = std::move(name);
    
    if (auto p = ctx->initializer()) {
        vdecl->init = self(p);
        if (sq.second.const_) {
            // Additional validation for const arrays
            if (auto initList = vdecl->init->dcst<InitListExpr>()) {
                // Validate initializer list matches array dimensions //验证是否正确

            }
        }
    }
    
    (*mSymtbl)[vdecl->name] = vdecl;
    return vdecl;
  }
  if (auto funcType = texp->dcst<FunctionType>()) {
    auto fdecl = make<FunctionDecl>();
    auto type = make<Type>();
    fdecl->type = type;

    type->spec = sq.first;
    type->qual = sq.second;
    type->texp = funcType;

    fdecl->name = std::move(name);
    for (auto p : funcType->params) {
      auto paramDecl = make<VarDecl>();
      paramDecl->type = p;
      fdecl->params.push_back(paramDecl);
    }

    if (ctx->initializer())
      ABORT();
    fdecl->body = nullptr;

    ret = fdecl;
  }

  else {
    auto vdecl = make<VarDecl>();
    auto type = make<Type>();
    vdecl->type = type;

    type->spec = sq.first;
    type->qual = sq.second;
    type->texp = texp;
    vdecl->name = std::move(name);

    if (auto p = ctx->initializer())
      vdecl->init = self(p);
    else
      vdecl->init = nullptr;

    ret = vdecl;
  }

  // 这个实现允许符号重复定义，新定义会取代旧定义
  (*mSymtbl)[ret->name] = ret;
  return ret;
}

} // namespace asg
